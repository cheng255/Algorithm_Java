package com.cheng.面试金典;

/**
 * @author nuonuo
 * @create 2021-10-30 10:52
 * 编写一个方法，计算从 0 到 n (含 n) 中数字 2 出现的次数。
 *
 * 示例:
 *
 * 输入: 25
 * 输出: 9
 * 解释: (2, 12, 20, 21, 22, 23, 24, 25)(注意 22 应该算作两次)
 */

/**
 * 思路：  观察每一位出现2的情况     个位：  每10个数字出现一次
 *                                 十位：  每100个数字出现10次
 *                                 百位：  每1000个数字出现100次
 *          这就是规律。 比如说323
 *                      个位的2     计算：323 / 10 * 1 = 32,但我们发现  320 ~ 329的结果一样，但实际上不一样
 *                                  所以个位超过2的情况，要再加上一个1，个位的2有 33个
 *                      十位的2     计算：323 / 100 * 10 = 30,  这时候判断十位上 如果 > 2，则加上10，但这里2 == 2，
 *                                  所以应该加上多少呢？   我们应该去看十位的下一位，也就是个位，个位是3，
 *                                  也就是说 0 ~ 3符合要求， 4 ~ 9不符合，所以应该加上   10的  4/10 也就是4，
 *                                  所以十位的2有   30+4 = 34个
 *
 *                      百位的2      计算：323 / 1000 * 100 = 0, 判断 3 > 2 ,所以百位的2 结果是100
 *
 *                      最终结果  33 + 34 + 100 = 167
 */
public class tow出现的次数 {
    public int numberOf2sInRange(int n) {
        int res = 0;
        int t = 10;
        int k = 1;
        char[] chars = String.valueOf(n).toCharArray();
        for (int i = chars.length-1; i >= 0; i--) {
            res += n / t * k;//当前位 每t个就有k个2
            if (chars[i] > '2') {//大于2的话还要再多k个
                res += k;
            } else if (chars[i] == '2') {//等于2的话只多了这一轮的一部分
                if (i == chars.length-1) {
                    res += 1;
                } else {
                    //把低位的数字得到
                    int temp = Integer.parseInt(String.valueOf(chars, i+1, chars.length-i-1));
                    res += temp + 1;
                    //
                }
            }
            k = t;
            t *= 10;
        }
        return res;
    }

}
